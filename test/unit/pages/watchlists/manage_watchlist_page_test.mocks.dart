// Mocks generated by Mockito 5.4.4 from annotations
// in dima_project/test/unit/pages/watchlists/manage_watchlist_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dima_project/models/user.dart' as _i5;
import 'package:dima_project/models/watchlist.dart' as _i6;
import 'package:dima_project/services/watchlist_service.dart' as _i3;
import 'package:logger/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WatchlistService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistService extends _i1.Mock implements _i3.WatchlistService {
  MockWatchlistService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);

  @override
  _i4.Future<void> createWatchList(
    _i5.MyUser? user,
    String? name,
    bool? isPrivate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createWatchList,
          [
            user,
            name,
            isPrivate,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateWatchList(_i6.WatchList? watchList) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWatchList,
          [watchList],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteWatchList(_i6.WatchList? watchList) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteWatchList,
          [watchList],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.WatchList>> getOwnWatchLists(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOwnWatchLists,
          [userId],
        ),
        returnValue: _i4.Future<List<_i6.WatchList>>.value(<_i6.WatchList>[]),
      ) as _i4.Future<List<_i6.WatchList>>);

  @override
  _i4.Future<List<_i6.WatchList>> getCollabWatchLists(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollabWatchLists,
          [userId],
        ),
        returnValue: _i4.Future<List<_i6.WatchList>>.value(<_i6.WatchList>[]),
      ) as _i4.Future<List<_i6.WatchList>>);

  @override
  _i4.Future<List<_i6.WatchList>> getPublicWatchLists(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicWatchLists,
          [userId],
        ),
        returnValue: _i4.Future<List<_i6.WatchList>>.value(<_i6.WatchList>[]),
      ) as _i4.Future<List<_i6.WatchList>>);

  @override
  _i4.Future<_i6.WatchList?> getWatchList(
    String? userId,
    String? watchListId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWatchList,
          [
            userId,
            watchListId,
          ],
        ),
        returnValue: _i4.Future<_i6.WatchList?>.value(),
      ) as _i4.Future<_i6.WatchList?>);

  @override
  _i4.Future<List<_i6.WatchList>> getFollowingWatchlists(_i5.MyUser? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFollowingWatchlists,
          [user],
        ),
        returnValue: _i4.Future<List<_i6.WatchList>>.value(<_i6.WatchList>[]),
      ) as _i4.Future<List<_i6.WatchList>>);

  @override
  _i4.Future<void> followWatchlist(
    String? userId,
    String? watchlistId,
    String? watchlistOwner,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #followWatchlist,
          [
            userId,
            watchlistId,
            watchlistOwner,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unfollowWatchlist(
    String? userId,
    String? watchlistId,
    String? watchlistOwner,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unfollowWatchlist,
          [
            userId,
            watchlistId,
            watchlistOwner,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addMovieToWatchlist(
    String? userId,
    String? watchlistId,
    int? movieId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMovieToWatchlist,
          [
            userId,
            watchlistId,
            movieId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeMovieFromWatchlist(
    String? userId,
    String? watchlistId,
    int? movieId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMovieFromWatchlist,
          [
            userId,
            watchlistId,
            movieId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> inviteCollaborator(
    String? watchlistId,
    String? watchlistOwner,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #inviteCollaborator,
          [
            watchlistId,
            watchlistOwner,
            userId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> acceptInvite(
    String? watchlistId,
    String? watchlistOwner,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptInvite,
          [
            watchlistId,
            watchlistOwner,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> declineInvite(
    String? watchlistId,
    String? watchlistOwner,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #declineInvite,
          [
            watchlistId,
            watchlistOwner,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeMyselfAsCollaborator(
    String? watchlistId,
    String? watchlistOwner,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMyselfAsCollaborator,
          [
            watchlistId,
            watchlistOwner,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
